#
# SMB.CONF(5)		The configuration file for the Samba suite 
# $FreeBSD$
#
<%
        import os
        import logging
        logger = logging.getLogger(__name__)

        def get_db_config():
            db = {}
            db['truenas_conf'] = {"is_truenas_ha": False, "failover_status": "DEFAULT"}
            if not middleware.call_sync('system.is_freenas') and middleware.call_sync('failover.licensed'):
                db['truenas_conf']['is_truenas_ha'] = True
                db['truenas_conf']['failover_status'] = middleware.call_sync('failover.status')

            db['cifs'] = middleware.call_sync('smb.config')
            db['shares'] = middleware.call_sync('sharing.smb.query')
            db['afp_shares'] = middleware.call_sync('sharing.afp.query')
            db['nfs_exports'] = middleware.call_sync('sharing.nfs.query')
            db['fruit_enabled'] = False
            for share in db['shares']:
                if "fruit" in share['vfsobjects'] or share['timemachine']:
                    db['fruit_enabled'] = True
                    break

            return db

        def make_homedir(homedir_path=None):
            ret = True
            if not os.access(homedir_path, os.F_OK):
                try:
                    os.mkdir(homedir_path) 
                except Exception as e:
                    logger.debug(f"Failed to create home directory {homedir_path}: ({e})") 
                    ret = False
            return ret

        def order_vfs_objects(vfs_objects):
            vfs_objects_special = ('catia', 'zfs_space', 'zfsacl', 'fruit', 'streams_xattr', 'crossrename', 'recycle')
            vfs_objects_ordered = []

            if 'fruit' in vfs_objects:
                if 'streams_xattr' not in vfs_objects:
                    vfs_objects.append('streams_xattr')

            for obj in vfs_objects:
                if obj not in vfs_objects_special:
                    vfs_objects_ordered.append(obj)

            for obj in vfs_objects_special:
                if obj in vfs_objects:
                    vfs_objects_ordered.append(obj)

            return vfs_objects_ordered

        def parse_db_config(db):
            pc = {}
            for share in db['shares']:
                """
                    Special behavior is needed for [homes]:
                    We append %U (authenticated username) to the share path
                    for non-AD environments, and %D/%U for AD environments.
                    This prevents users from being able to access the each 
                    others home directories. %D is required for AD to prevent
                    collisions between AD users and local users or users in
                    trusted domains. 
                """
                is_home_share = False
                is_ad_environment = False
                if share["home"]:
                    is_home_share = True
                    share["name"] = "homes" 
                    ad =  middleware.call_sync('datastore.config', 'directoryservice.activedirectory') 
                    if ad['ad_enable']:
                        is_ad_environment = True

                pc[share["name"]] = {}
                if is_home_share and is_ad_environment:
                    pc[share["name"]].update({"path": f'{share["path"]}/%D/%U'})
                    base_homedir = f"{share['path']}/{db['cifs']['workgroup']}"
                    make_homedir(base_homedir) 

                elif is_home_share:
                    pc[share["name"]].update({"path": f'{share["path"]}/%U'})
                else:
                    pc[share["name"]].update({"path": share["path"]})

                if share['comment']:
                    pc[share["name"]].update({"comment": share['comment']})
                if not share['ro']:
                    pc[share["name"]].update({"read only": "no"})
                if not share['browsable']:
                    pc[share["name"]].update({"bowseable": "no"})
                if share['guestok']:
                    pc[share["name"]].update({"guest ok": "yes"})
                if share['guestonly']:
                    pc[share["name"]].update({"guest only": "yes"})
                if share['showhiddenfiles']:
                    pc[share["name"]].update({"hide dot files": "no"})
                if share['abe']:
                    pc[share["name"]].update({"access based share enumeration": "yes"})
                if share['hostsallow']:
                    pc[share["name"]].update({"hosts allow": share['hostsallow']})
                if share['hostsdeny']:
                    pc[share["name"]].update({"hosts deny": share['hostsdeny']})

                """
                   If we detect that this share is also an AFP share, then enable cross-protocol
                   locking, and change the way alternate datastream naming syntax so that it matches
                   what netatalk does.

                   With NFS, turn off oplocks since FreeBSD doesn't currently support kernel oplocks
                   and force strict locking. In the case of detection of NFS/SMB shares, only look
                   at whether the SMB share's path is identical to or a parent of the NFS export. This
                   does not catch every possible edge case of the same data being shared, but it is an
                   acceptable compromise for now.
                """
                if any(filter(lambda x: f"{x['path']}/" in f"{share['path']}/" or f"{share['path']}/" in f"{x['path']}/", db['afp_shares'])):
                    logger.debug(f"SMB share ({share['name']}) is also an AFP share. Appling parameters for mixed-protocol share.")
                    pc[share["name"]].update({
                        "fruit:locking": "yes",
                        "strict locking": "auto",
                        "streams_xattr:prefix": "user.",
                        "streams_xattr:store_stream_type": "no"
                    })
                    db['fruit_enabled'] = True

                nfs_path_list = []
                for export in db['nfs_exports']: nfs_path_list.extend(export['paths'])
                if any(filter(lambda x: f"{share['path']}/" in f"{x}/", nfs_path_list)):
                    logger.debug(f"SMB share ({share['name']}) is also an NFS export. Appling parameters for mixed-protocol share.")
                    pc[share["name"]].update({
                        "strict locking": "yes",
                        "level2 oplocks": "no",
                        "oplocks": "no"
                    })

                if db['fruit_enabled']:
                    if "fruit" not in share['vfsobjects']:
                        share['vfsobjects'].append('fruit')

                if share['recyclebin']:
                    # crossrename is required for 'recycle' to work across sub-datasets
                    share['vfsobjects'].extend(['recycle','crossrename'])

                ordered_vfs_objects = order_vfs_objects(share['vfsobjects'])
                pc[share["name"]].update({"vfs objects": ordered_vfs_objects})

                if db['fruit_enabled']:
                    pc[share["name"]].update({"fruit:metadata": "stream"})
                    pc[share["name"]].update({"fruit:resource": "stream"})

                if share['timemachine']:
                    pc[share["name"]].update({"fruit:time machine": "yes"})
                    pc[share["name"]].update({"fruit:volume_uuid": share['vuid']})

                if share['recyclebin']:
                    pc[share["name"]].update({"recycle:repository": ".recycle/%U"})
                    pc[share["name"]].update({"recycle:keeptree": "yes"})
                    pc[share["name"]].update({"recycle:keepversions": "yes"})
                    pc[share["name"]].update({"recycle:touch": "yes"})
                    pc[share["name"]].update({"recycle:directory_mode": "0777"})
                    pc[share["name"]].update({"recycle:subdir_mode": "0700"})

                pc[share["name"]].update({"nfs4:chown": "true"})
                pc[share["name"]].update({"nfs4:acedup": "merge"})
                pc[share["name"]].update({"veto files": "/.windows/.mac/"})

                for param in share['auxsmbconf'].splitlines():
                    if not param.strip():
                        continue
                    try:
                        param_kv = [kv.strip() for kv in param.split("=")]
                        pc[share["name"]].update({param_kv[0]: param_kv[1]})
                    except Exception:
                        logger.debug(f"[{share['name']}] contains invalid auxiliary parameter: ({param})")

            return pc

        db = get_db_config()
        parsed_conf = {}
        parsed_conf = parse_db_config(db)


%>

% if db['truenas_conf']['failover_status'] is not "BACKUP":
% for share_name, share in parsed_conf.items():
[${share_name}]
    % for param, value in share.items():
      % if type(value) == list:
        ${param} = ${' '.join(value)}
      % else:
        ${param} = ${value}
      % endif
    % endfor

% endfor
% endif
