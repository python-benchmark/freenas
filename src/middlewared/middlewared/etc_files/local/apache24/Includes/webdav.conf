<%
	import crypt
	import hashlib
	import itertools
	import os
	import random
	import subprocess

	from string import digits, ascii_uppercase, ascii_lowercase

	# Check to see if there is a webdav lock databse directory, if not create
	# one. Take care of necessary permissions whilst creating it!
	oscmd = '/etc/local/apache24/var'
	if not os.path.isdir(oscmd):
		os.mkdir(oscmd, 0o774)

	# Changing ownership for all directories and files in oscmd
	webdav_user = middleware.call_sync('user.query', [['username', '=', 'webdav']])
	if not webdav_user:
		uid, gid = 0, 0
	else:
		uid, gid = webdav_user[0]['uid'], webdav_user[0]['group']['bsdgrp_gid']

	for root, dirs, files in os.walk(oscmd):
		for o in list(itertools.chain(dirs, files)):
			os.chown(os.path.join(root, o), uid, gid)

	webdav_config = middleware.call_sync('webdav.config')
	auth_type = webdav_config['htauth'].lower()
	web_shares = middleware.call_sync('sharing.webdav.query')
	password = webdav_config["password"]

	# Generating relevant password files

	def salt():
		"""
		Returns a string of 2 random letters.
		Taken from Eli Carter's htpasswd.py
		"""
		letters = f'{ascii_lowercase}{ascii_uppercase}{digits}/.'
		return '$6${0}'.format(''.join([random.choice(letters) for i in range(16)]))

	if auth_type == 'none':
		path = None
	elif auth_type == 'basic':
		path = '/etc/local/apache24/webdavhtbasic'
		with open(path, 'w+') as f:
			f.write(f'webdav:{crypt.crypt(password, salt())}')
	elif auth_type == 'digest':
		path = '/etc/local/apache24/webdavhtdigest'
		with open(path, 'w+') as f:
			f.write(
				"webdav:webdav:{0}".format(hashlib.md5(f"webdav:webdav:{password}".encode()).hexdigest())
			)
	else:
		raise ValueError("Invalid auth_type (must be one of 'none', 'basic', 'digest')")

	if path:
		os.chown(path, uid, gid)

	# A function to change permissions on a webdav share
	def change_perms(path):
		subprocess.Popen(f'chown -R webdav:webdav {path}', stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, close_fds=True).communicate()

%>
Listen ${webdav_config['tcpport']}
	<VirtualHost *:${webdav_config['tcpport']}>
		DavLockDB "/etc/local/apache24/var/DavLock"
		AssignUserId webdav webdav

		<Directory />
% if auth_type != 'none':
			AuthType ${auth_type}
			AuthName webdav
			AuthUserFile "/etc/local/apache24/webdavht${auth_type}"
	% if auth_type == 'digest':
			AuthDigestProvider file
	% endif
			Require valid-user

% endif
			Dav On
			IndexOptions Charset=utf-8
			AddDefaultCharset UTF-8
			AllowOverride None
			Order allow,deny
			Allow from all
			Options Indexes FollowSymLinks
		</Directory>

% for share in web_shares:
		Alias /${share['name']} "${share['path']}"
		<Directory "${share['path']}" >
		</Directory>
	% if share['ro']:
		<Location /"${share['name']}" >
			AllowMethods GET OPTIONS PROPFIND
		</Location>
	% endif
<% if share['perm']:
	change_perms(share['path'])	
%>

% endfor
		# The following directives disable redirects on non-GET requests for
		# a directory that does not include the trailing slash.  This fixes a
		# problem with several clients that do not appropriately handle
		# redirects for folders with DAV methods.
		BrowserMatch "Microsoft Data Access Internet Publishing Provider" redirect-carefully
		BrowserMatch "MS FrontPage" redirect-carefully
		BrowserMatch "^WebDrive" redirect-carefully
		BrowserMatch "^WebDAVFS/1.[01234]" redirect-carefully
		BrowserMatch "^gnome-vfs/1.0" redirect-carefully
		BrowserMatch "^XML Spy" redirect-carefully
		BrowserMatch "^Dreamweaver-WebDAV-SCM1" redirect-carefully
		BrowserMatch " Konqueror/4" redirect-carefully
	</VirtualHost>
