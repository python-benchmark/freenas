#
# SMB.CONF(5)		The configuration file for the Samba suite 
# $FreeBSD$
#
<%
        import os
        import sys
        import logging
        logger = logging.getLogger(__name__)

        LOGLEVEL_UNMAP = {
            'NONE': '0',
            'MINIMUM': '1',
            'NORMAL': '2',
            'FULL': '3',
            'DEBUG': '10',
        }

        parsed_conf = {}

        def get_db_config():
            conf = {}

            conf['cifs'] = middleware.call_sync('smb.config')
            conf['ad'] = middleware.call_sync('datastore.config', 'directoryservice.activedirectory')
            conf['ldap'] = middleware.call_sync('datastore.config', 'directoryservice.ldap')
            conf['nis'] = middleware.call_sync('datastore.config', 'directoryservice.nis')
            conf['gc'] = middleware.call_sync('network.configuration.config')
            conf['shares'] = middleware.call_sync('sharing.smb.query')
            conf['role'] = 'standalone'
            conf['guest_enabled'] = False
            conf['system_dataset'] = middleware.call_sync('systemdataset.config')
            conf['loglevel'] = LOGLEVEL_UNMAP.get(conf['cifs']['loglevel'])

            conf['truenas_conf'] = {'is_truenas_ha': False, 'failover_status': 'DEFAULT', 'smb_ha_mode': 'LEGACY'}
            if not middleware.call_sync('system.is_freenas') and middleware.call_sync('failover.licensed'):
                conf['truenas_conf']['is_truenas_ha'] = True
                conf['truenas_conf']['failover_status'] = middleware.call_sync('failover.status')
                if conf['system_dataset']['pool'] is not 'freenas-boot':
                     truenas_params['smb_ha_mode'] = 'UNIFIED'
            if conf['ad']['ad_enable']:
                conf['role'] = 'ad_member'
            elif conf['ldap']['ldap_enable'] and conf['ldap']['ldap_has_samba_schema']:
                conf['role'] = 'ldap_member'
            elif middleware.call_sync('datastore.query', 'services.services', [('srv_service','=','domaincontroller')], {'get' : True})['srv_enable']:
                conf['role'] = 'domain_controller'
                conf['DC'] = middleware.call_sync('datastore.config', 'services.DomainController')

            if any(filter(lambda x: x['guestok'], conf['shares'])):
                conf['guest_enabled'] = True 

            return conf

        def get_cifs_homedir():
            cifs_homedir = "/home"
            config_homedir = middleware.call_sync('sharing.smb.query', [["home", "=", True]])
            if config_homedir:
                cifs_homedir = config_homedir[0]['path']
        
            return cifs_homedir

        def add_bind_interfaces(pc, db):
            if db['cifs']['bindip']:
                bindips = (db['cifs']['bindip'])
                if db['role'] != 'DC':
                    bindips.insert(0, "127.0.0.1")
                pc.update({'interfaces': " ".join(bindips)})

            pc.update({'bind interfaces only': 'Yes'})

        def add_general_params(pc, db):
            if os.path.exists("/usr/local/etc/smbusername.map"):
                pc.update({'username map': '/usr/local/etc/smbusername.map'})
            pc.update({'dns proxy': 'No'})
            pc.update({'deadtime': '15'})
            pc.update({'max log size': '51200'})
            pc.update({'load printers': 'No'})
            pc.update({'printing': 'bsd'})
            if not db['cifs']['syslog']:
                pc.update({'logging' : 'file'})
            pc.update({'log level' : db['loglevel']}) 
            if db['cifs']['enable_smb1'] or db['role'] == "domain_controller":
                pc.update({'server min protocol': 'NT1'})
            else:
                pc.update({'server min protocol': 'SMB2_02'})
            pc.update({'disable spoolss': 'Yes'})
            if db['cifs']['guest'] is not "nobody":
                pc.update({'guest account': db['cifs']['guest']}) 
            if db['guest_enabled']:
                pc.update({'map to guest': 'Bad User'})
            if db['cifs']['obey_pam_restrictions']:
                pc.update({'obey pam restrictions': 'Yes'}) 
            if db['cifs']['ntlmv1_auth']:
                pc.update({'ntlm auth': 'Yes'})
                pc.update({'client ntlmv2 auth': 'No'})
            pc.update({'directory name cache size': '0'})
            pc.update({'kernel change notify': 'No'})
            pc.update({'nsupdate command': "/usr/local/bin/samba-nsupdate -g"})
            if db['cifs']['description']:
                pc.update({'server string': db['cifs']['description']})
            pc.update({'lm announce': 'Yes'})
            if db['cifs']['hostlookup']:
                pc.update({'hostname lookups': 'Yes'})
            if not db['cifs']['unixext'] or not db['cifs']['enable_smb1']:
                pc.update({'unix extensions': 'No'})
            if db['cifs']['timeserver']:
                pc.update({'time server': 'Yes'})
            if db['cifs']['nullpw']:
                pc.update({'null passwords': 'Yes'})
            if db['cifs']['allow_execute_always']:
                pc.update({'acl allow execute always': 'Yes'})
            pc.update({'dos filemode': 'Yes'})
            if not db['cifs']['zeroconf']:
                pc.update({'multicast dns register': 'No'})
            if db['cifs']['filemask']:
                pc.update({'create mask': db['cifs']['filemask']})
            if db['cifs']['dirmask']:
                pc.update({'directory mask': db['cifs']['dirmask']})
            pc.update({'unix charset': db['cifs']['unixcharset']})

            return pc 

        def add_licensebased_params(pc, db):
            if db['truenas_conf']['smb_ha_mode'] == 'UNIFIED':
                pc.update({
                    'netbios name': db['gc']['hostname_virtual'],
                    'netbios aliases': db['cifs']['netbiosalias']
                })https://redmine.ixsystems.com/issues/58824
            elif db['truenas_conf']['is_truenas_ha']:
                pc.update({
                    'netbios name': db['cifs']['netbiosname'],
                    'netbios aliases': db['cifs']['netbiosalias'],
                    'private dir': '/root/samba/private',
                    'winbind netbios alias spn': 'true'
                })
            else:
                pc.update({
                    'netbios name': db['cifs']['netbiosname'],
                    'netbios aliases': db['cifs']['netbiosalias'],
                })

            return pc

        def add_rolebased_params(pc, db):
            if db['role'] == "ad_member":
                pc.update({'server role': 'member server'})
                pc.update({'workgroup': db['cifs']['workgroup'].upper()})
                pc.update({'realm': db['ad']['ad_domainname'].upper()})
                pc.update({'security': 'ADS'})
                pc.update({'client use spnego': 'Yes'})
                pc.update({'local master': 'No'})
                pc.update({'domain master': 'No'})
                pc.update({'preferred master': 'No'})
                if not db['ad']['ad_allow_dns_updates']:
                    pc.update({'ad allow dns update': 'No'})
                pc.update({'winbind cache time': '7200'})
                pc.update({'winbind offline logon': 'Yes'})
                pc.update({'winbind enum users': 'Yes'})
                pc.update({'winbind enum groups': 'Yes'})
                if db['ad']['ad_use_default_domain']:
                    pc.update({'winbind use default domain': 'Yes'})
                pc.update({'winbind refresh tickets': 'Yes'})
                if db['ad']['ad_nss_info']:
                    pc.update({'winbind nss info': db['ad']['ad_nss_info']})
                if not db['ad']['ad_allow_trusted_doms']:
                    pc.update({'allow trusted domains': 'No'})
                pc.update({'client ldap sasl wrapping': db['ad']['ad_ldap_sasl_wrapping']})
                pc.update({'template shell': '/bin/sh'})
                pc.update({'template homedir': f'{get_cifs_homedir()}/%%D/%%U'})

            elif db['role'] ==  'ldap_member':
                pc.update({'server role': 'member server'})
                pc.update({'security': 'user'})
                if type(db['ldap']['ldap_hostname']) == list:
                    ldap_pdb_backend = "ldapsam:\"%s\"" & " ".join([
                        "%s://%s" % ("ldaps" if db['ldap']['ldap_ssl'] == 'on' else "ldap", hostname)
                        for hostname in db['ldap']['ldap_hostname'].split()
                    ])
                else:
                    ldap_pdb_backend = f'ldapsam:\"{"ldaps" if db["ldap"]["ldap_ssl"] is not "off" else "ldap"}\"//{db["ldap"]["ldap_hostname"]}'
                pc.update({'passdb backend': ldap_pdb_backend})
                pc.update({'ldap admin dn': db['ldap']['ldap_binddn']})
                pc.update({'ldap suffix': db['ldap']['ldap_basedn']}) 
                pc.update({'ldap user suffix': db['ldap']['ldap_user_suffix']})
                pc.update({'ldap group suffix': db['ldap']['ldap_group_suffix']})
                pc.update({'ldap machine suffix': db['ldap']['ldap_machine_suffix']})
                if db['ldap']['ldap_ssl'] is not "start_tls":
                    pc.update({'ldap ssl': 'off'})
                pc.update({'ldap replication sleep': '1000'})
                pc.update({'ldap passwd sync': 'Yes'})
                pc.update({'ldapsam trusted': 'Yes'})
                pc.update({'ldap workgroup': db['ldap']['ldap_workgroup']})
                pc.update({'domain logons': 'Yes'})

            elif db['role'] == "domain_controller":
                pc.update({'server role': 'active directory domain controller'})
                pc.update({'workgroup': db['DC']['dc_domain'].upper()}) 
                pc.update({'realm': db['DC']['dc_realm'].upper()})
                pc.update({'dns forwarder': db['DC']['dc_dns_forwarder']}) 
                pc.update({'idmap_ldb:use rfc2307': 'yes'})

            elif db['role'] == "standalone":
                pc.update({'server role': 'standalone'})
                pc.update({'workgroup': db['cifs']['workgroup'].upper()})

            return pc

        def add_default_idmap_domain(pc, db):
            def_idmap = middleware.call_sync('datastore.config', 'directoryservice.idmap_tdb')
            pc.update({'idmap config * : backend': 'tdb'})
            pc.update({'idmap config * : range': f'{def_idmap["idmap_tdb_range_low"]}-{def_idmap["idmap_tdb_range_high"]}'})

            return pc

        def add_idmap_domain(pc,db, domain, backend):
            if domain == pc['workgroup']:
                idmap = middleware.call_sync('datastore.config', f'directoryservice.idmap_{db["ad"]["ad_idmap_backend"]}')
            else:
                idmap = middleware.call_sync('datastore.config', f'directoryservice.idmap_{backend}')

            low_range = idmap[f'idmap_{backend}_range_low']
            high_range = idmap[f'idmap_{backend}_range_high']

            if backend != "autorid":
                add_default_idmap_domain(pc, db)
                pc.update({f'idmap config {domain}: backend': backend})
                pc.update({f'idmap config {domain}: range': f'{low_range}-{high_range}'})

            if backend == "autorid":
                pc.update({'idmap config * : backend': backend})
                pc.update({'idmap config * : range': f'{low_range}-{high_range}'})
                pc.update({'idmap config * : rangesize': idmap['idmap_autorid_rangesize']})
                if idmap['idmap_autorid_readonly']:
                    pc.update({'idmap config * : readonly': 'Yes'})
                if idmap['idmap_autorid_ignore_builtin']:
                    pc.update({'idmap config * : ignore_builtin': 'Yes'})

            elif backend == "ad":
                pc.update({f'idmap config {domain}: schema_mode': idmap['idmap_ad_schema_mode']})
                if idmap['idmap_ad_unix_nss_info']:
                    pc.update({f'idmap config {domain}: unix_nss_info': idmap['idmap_ad_unix_nss_info']})
                if idmap['idmap_ad_unix_nss_info']:
                    pc.update({f'idmap config {domain}: unix_primary_group': idmap['idmap_ad_unix_primary_group']})
            elif backend == "rfc2307":
                pc.update({f'idmap config {domain}: ldap_server': idmap['idmap_rfc2307_ldap_server']})
                if idmap['idmap_rfc2307_ldap_server_url']:
                    pc.update({f'idmap config {domain}: ldap_url': idmap['idmap_rfc2307_ldap_url']})
                if idmap['idmap_rfc2307_bind_path_user']:
                    pc.update({f'idmap config {domain}: bind_path_user': idmap['idmap_rfc2307_bind_path_user']})
                if idmap['idmap_rfc2307_bind_path_group']:
                    pc.update({f'idmap config {domain}: bind_path_group': idmap['idmap_rfc2307_bind_path_group']})
                if idmap['idmap_rfc2307_user_cn']:
                    pc.update({f'idmap config {domain}: user_cn': "Yes"})
                if idmap['idmap_rfc2307_cn_realm']:
                    pc.update({f'idmap config {domain}: realm': "Yes"})
                if idmap['idmap_rfc2307_ldap_domain']:
                    pc.update({f'idmap config {domain}: ldap_domain': idmap['idmap_rfc2307_ldap_domain']})
                if idmap['idmap_rfc2307_ldap_user_dn']:
                    pc.update({f'idmap config {domain}: ldap_user_dn': idmap['idmap_rfc2307_ldap_user_dn']})
                if idmap['idmap_rfc2307_ssl']:
                    pc.update({'ldap ssl': 'start tls'}) 
                    if idmap['idmap_rfc2307_ldap_server'].lower() == "ads":
                        pc.update({'ldap ssl ads': 'Yes'})

            elif backend in ['script', 'tdb2']:
                if idmap[f'idmap_{backend}_script']:
                    pc.update({f'idmap config {domain}: script': idmap[f'idmap_{backend}_script']})

            return pc

        def add_idmap_params(pc, db):
            if db['role'] == "ad_member":
                add_idmap_domain(pc, db, pc['workgroup'], db['ad']['ad_idmap_backend'])
            elif db['role'] == "ldap_member":
                add_idmap_domain(pc, db, pc['workgroup'], db['ldap']['ldap_idmap_backend'])
            elif db['role'] == "standalone":
                add_default_idmap_domain(pc, db)

            return pc

        def add_aux_params(pc, db):
            for param in db['cifs']['smb_options'].splitlines():
                if not param.strip():
                    continue
                try:
                    param_kv = [kv.strip() for kv in param.split("=")]
                    pc.update({param_kv[0]: param_kv[1]})
                except Exception:
                    logger.debug(f"[global] contains invalid auxiliary parameter: ({param})")

        def parse_config(db):
            pc = {}
            add_general_params(pc, db)
            add_bind_interfaces(pc, db)
            add_licensebased_params(pc, db)
            add_rolebased_params(pc, db)
            add_idmap_params(pc, db)
            add_aux_params(pc, db)

            return pc

        db = get_db_config()
        parsed_conf = parse_config(db)

%>

[global]
%if db['truenas_conf']['smb_ha_mode'] == 'UNIFIED' and db['truenas_config']['failover_status'] != 'MASTER':
        [global]
        netbios name = {db['gc']['hostname_virtual']}_PASSIVE
        multicast dns register = False
        logging = file
%else:
    % for param, value in parsed_conf.items():
      % if type(value) == list:
        ${param} = ${' '.join(value)}
      % else:
        ${param} = ${value}
      % endif
    % endfor
%endif

        include = /usr/local/etc/smb4_share.conf

% if db['role'] == "DC":
[sysvol]
        path = /var/db/samba4/sysvol
        vfs objects = dfs_samba4 zfsacl
        zfsacl:map_dacl_protected = True

[netlogon]
        path = /var/db/samba4/sysvol/{parsed_config['realm'].lower()}/scripts
        vfs objects = dfs_samba4 zfsacl
        zfsacl:map_dacl_protected = True
% endif"
